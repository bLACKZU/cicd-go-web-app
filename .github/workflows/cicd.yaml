name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - 'k8s/**'
      - 'static/**'
      - 'README.md'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Build application
        run: go build -v -o go-web-app
    
      - name: Run tests
        run: go test ./ -coverprofile=coverage.out

      - name: Install gocover-cobertura
        run: go install github.com/boumenot/gocover-cobertura@latest
      
      - name: Convert coverage to XML
        run: gocover-cobertura < coverage.out > coverage.xml
    
      - name: List files
        run: |
            pwd
            ls -la
    
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  sca:
    runs-on: ubuntu-latest 
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage
      
      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.22'
      - run: go version

      - name: Copy sonar-project.properties
        run: |
          cp .github/workflows/sonar_properties/sonar-project.properties .

      - name: Shell
        run: |
          ls -la

      - name: SonarQube Scan for Go
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: .

      - name: Wait for SonarQube Quality Gate Result
        run: sleep 20

      - name: Set Sonar variables
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request')
        run: |
          echo "sonar_project_key=$(cat sonar-project.properties | grep sonar.projectKey | cut -d '=' -f 2)" >> $GITHUB_ENV
          if [ ${{ github.event_name }} == 'pull_request' ]; then
            echo "pull_request_number=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          fi  
          if[ ${{ github.event_name }} == 'push' ]; then
            echo "branch_name=${{ github.ref_name }}" >> $GITHUB_ENV
          fi
      
      # The -q and -k flags are used to suppress reading the default . curlrc config file progress output and to allow insecure server connections when using SSL.
      # SonarQube API - https://next.sonarqube.com/sonarqube/web_api/api/qualitygates?query=quality
      - name: Query Sonar Quality Gate
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request')
        run: |
          if [ ${{ github.event_name }} == 'pull_request' ]; then
            curl -q -k -u ${{ secrets.SONAR_TOKEN }}: -G \
              "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ env.sonar_project_key }}&pullRequest=${{ env.pull_request_number }}" \
              -o status.json
          fi
          if [ ${{ github.event_name }} == 'push' ]; then
            curl -q -k -u ${{ secrets.SONAR_TOKEN }}: -G \
              "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ env.sonar_project_key }}&branch=${{ env.branch_name }}" \
              -o status.json
          fi
          cat status.json || true
          sed -i -e 's/new_coverage/Coverage/g' -e 's/new_violations/New Violations/g' -e 's/new_duplicated_lines_density/Duplications/g' -e 's/new_security_hotspots_reviewed/Security Reviewed/g status.json
